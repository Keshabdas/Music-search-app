{"version":3,"sources":["components/TrackInfo/TrackInfo.js","components/MusicPlayer/MusicPlayer.js","Actions/Search.js","Actions/selectedSong.js","containers/App/index.js","containers/SongDetails/index.js","Reducers/SearchReducer.js","Reducers/selectedSongReducer.js","Reducers/index.js","Api/api.js","Saga/saga.js","configureStore.js","App.js","serviceWorker.js","index.js"],"names":["TrackInfo","imgSource","artistName","collectionName","genre","span","alt","src","height","width","style","boxShadow","padding","MusicPlayer","audioSrc","controls","outline","border","borderRadius","createActions","fetchSearchData","setSearchData","Actions","Types","Creators","getSelectedSong","setSelectedSong","Header","Layout","SearchActions","SelectedSongActions","connect","state","searchData","data","history","useState","text","setText","setData","handleOnClickChange","item","push","useEffect","background","position","zIndex","size","type","placeholder","allowClear","value","onChange","e","target","onChangeSearch","Title","level","display","results","length","resultCount","gutter","align","map","index","className","lg","md","sm","xs","key","hoverable","title","trackName","bordered","loading","extra","onClick","borderColor","borderWidth","artworkUrl100","primaryGenreName","previewUrl","CustomDiv","styled","div","selectedSong","song","bckImg","setBckImg","changeBackground","BackImg","millisec","seconds","toFixed","minutes","Math","floor","hours","parseMillisecondsIntoReadableTime","trackTimeMillis","moment","releaseDate","format","country","trackPrice","Object","keys","fontSize","Item","to","onPlay","onPause","itemLayout","dataSource","renderItem","Meta","INITIAL_STATE","HANDLERS","SET_SEARCH_DATA","action","payload","SearchReducer","createReducer","SET_SELECTED_SONG","selectedSongReducer","rootReducers","combineReducers","api","create","baseURL","setSelectedData","mySaga","call","getData","put","console","log","arg","a","Api","get","response","takeLatest","FETCH_SEARCH_DATA","GET_SELECTED_SONG","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","run","App","Store","path","component","Details","Main","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.29efec8f.chunk.js","sourcesContent":["import React from 'react';\r\n// import styled from 'styled-components';\r\nimport { Row, Col } from 'antd';\r\n\r\nconst TrackInfo = ({imgSource, artistName, collectionName, genre}) => {\r\n    \r\n    return (\r\n        <Row>\r\n            <Col span={8}>\r\n                <img alt=\"album art\" src={imgSource} height={130} width={130} style={{ boxShadow: '5px 5px 10px  rgba(0,0,0, 0.5)' }} />\r\n            </Col>\r\n            <Col span={16} style={{ padding: '0 10px' }}>\r\n                <Row>\r\n                    <Col>\r\n                        <p><b>Artist Name:</b> {artistName}</p>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <p><b>Album Name:</b> {collectionName}</p>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <p><b>Genre:</b> {genre}</p>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default TrackInfo;\r\n","import React from 'react'\r\nimport ReactAudioPlayer from 'react-audio-player';\r\nimport { Row, Col } from 'antd';\r\nimport styled from 'styled-components';\r\n\r\nconst MusicPlayer = ({audioSrc}) => {\r\n    \r\n    // const CustomDiv = styled.div`\r\n    //     & .music_player {\r\n    //         outline: none;\r\n    //         border: 1px solid lightgrey;\r\n    //         border-radius: 100px;\r\n    //         transition: all 0.3s linear;\r\n    //         min-width: 250px;\r\n    //         width: 350px;\r\n    //         box-shadow: 1px 1px 5px rgba(0,0,0, 0.5);\r\n    //         &:hover {\r\n    //             box-shadow: 3px 3px 10px rgba(0,0,0, 0.5);\r\n    //         }\r\n    //     }\r\n    // `;\r\n\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <h3>Song Preview</h3>\r\n                <div>\r\n                    <ReactAudioPlayer\r\n                        src={audioSrc}\r\n                        // className=\"music_player\"\r\n                        controls\r\n                        // onPlay={() => changeBackground(imgSrc)}\r\n                        // onPause={() => changeBackground()}\r\n                        style={{ outline: 'none', border: '1px solid black', borderRadius: '100px', boxShadow: '1px 1px 5px rgba(0,0,0, 0.5)', width: '350px' }}\r\n                    />\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default MusicPlayer;\r\n","import { createActions } from 'reduxsauce';\r\nimport { SET_SEARCH_DATA, FETCH_SEARCH_DATA  } from '../Constants'\r\n\r\nexport const  fetchSearchData = (value) => ({ type: FETCH_SEARCH_DATA, value });\r\n\r\nexport const  setSearchedData = (payload) => ({ type: SET_SEARCH_DATA, payload });\r\n\r\nconst { Types, Creators } = createActions({\r\n    fetchSearchData: ['value'],\r\n    setSearchData: ['payload']\r\n});\r\n\r\nconst Actions = { Types, Creators };\r\n\r\nexport default Actions;\r\n","import { createActions } from 'reduxsauce';\r\n\r\nconst { Types, Creators } = createActions({\r\n    getSelectedSong: ['payload'],\r\n    setSelectedSong: ['payload']\r\n});\r\n\r\nconst Actions = { Types, Creators };\r\n\r\nexport default Actions;","import React, { useState, useEffect } from 'react';\r\n// import styled from 'styled-components';\r\nimport { Input, Row, Col, Card, Empty, BackTop, Layout, Typography } from 'antd';\r\n// import { Link } from 'react-router-dom';\r\nimport TrackInfo from '../../components/TrackInfo/TrackInfo';\r\nimport MusicPlayer from '../../components/MusicPlayer/MusicPlayer';\r\nimport { connect } from \"react-redux\";\r\nimport SearchActions from '../../Actions/Search';\r\nimport SelectedSongActions from '../../Actions/selectedSong';\r\n\r\nconst { Header } = Layout;\r\n\r\nconst Main = ({searchData, fetchSearchData, getSelectedSong, history}) => {\r\n    \r\n    const [text, setText] = useState('');\r\n    const [data, setData] = useState([]);\r\n    // const [bckImg, setBckImg] = useState('');\r\n\r\n    const onChangeSearch = (e) => {\r\n        setText(e.target.value);\r\n    }\r\n\r\n    // const changeBackground = (value) => {\r\n    //     setBckImg(value)\r\n    // }\r\n\r\n    const handleOnClickChange = (item) => {\r\n        getSelectedSong(item);\r\n        history.push('/details');\r\n    }\r\n\r\n    useEffect(() => {\r\n        setData(searchData)\r\n    }, [searchData])\r\n\r\n    useEffect(() => {\r\n        if(text !== '') {\r\n            fetchSearchData(text);\r\n        }\r\n    }, [text, fetchSearchData]);\r\n\r\n    return (\r\n        \r\n        <div>\r\n            <Header style={{ background: '#cfe0e8', height: 92, width: '100%', position: 'fixed', zIndex: 10 }}>\r\n                <Input \r\n                    size=\"large\"\r\n                    type=\"text\" \r\n                    placeholder='Search for your favourite Artist, Songs and more....' \r\n                    allowClear \r\n                    value={text} \r\n                    onChange={(e) => onChangeSearch(e)} \r\n                    style={{ height: 56, outline: 'none', borderRadius: 30, padding: '2px 40px' }}\r\n                />\r\n            </Header>\r\n            <div \r\n                style={{ \r\n                    padding: '120px 30px', \r\n                    // height: '88vh',\r\n                    // background: '#cfe0e8',\r\n                    // height: '100%', \r\n                }}\r\n            >\r\n                <Row>\r\n                    <Col><Typography.Title level={4} style={{ display: data.results && data.results.length > 0 ? 'inline-block' : 'none' }}>Found {data.resultCount || 0} results.</Typography.Title></Col>\r\n                </Row>\r\n                <Row gutter={[16, 24]} align=\"stretch\">\r\n                    { data.results && data.results.length > 0 ? data.results.map((item, index) => {\r\n                        return (\r\n                        <Col className=\"gutter-column\" lg={8} md={12} sm={12} xs={24} style={{ position: 'relative' }} key={index} >\r\n                            {/* <Link to=\"/details\"> */}\r\n                            <Card \r\n                                hoverable \r\n                                title={`Song Name: ${item.trackName}`} \r\n                                bordered \r\n                                loading={false}\r\n                                // eslint-disable-next-line jsx-a11y/anchor-is-valid\r\n                                extra={<a onClick={() => handleOnClickChange(item)}>Know More</a>}\r\n                                onClick={() => handleOnClickChange(item)}\r\n                                style={{ \r\n                                    borderColor: 'blue',\r\n                                    borderWidth: 1.5,\r\n                                    borderRadius: 20,\r\n                                    height: '100%', \r\n                                }}\r\n                            >\r\n                                <TrackInfo imgSource={item.artworkUrl100} artistName={item.artistName} collectionName={item.collectionName} genre={item.primaryGenreName} />\r\n                                <br />\r\n                                <MusicPlayer audioSrc={item.previewUrl} />\r\n                            </Card>                                \r\n                            {/* </Link> */}\r\n                        </Col> \r\n                        )\r\n                    }): <div  style={{ height: '100%', width: '100%' }}><Empty /></div>}   \r\n                </Row>\r\n            </div>\r\n            <BackTop />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst fetchSearchData = SearchActions.Creators.fetchSearchData;\r\nconst getSelectedSong = SelectedSongActions.Creators.getSelectedSong;\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchData: state.searchData.data\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchSearchData, getSelectedSong })(Main);\r\n","import React, { useState, useEffect } from 'react';\r\nimport ReactAudioPlayer from 'react-audio-player';\r\nimport moment from 'moment';\r\nimport { Link } from 'react-router-dom';\r\nimport { Breadcrumb, Row, Col, Card, List, Typography } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\n\r\nconst CustomDiv = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    & .image {\r\n        height: 200px;\r\n        width: 200px;\r\n        cursor: pointer;\r\n        transition: all 0.3s linear;\r\n        box-shadow: 5px 5px 10px  rgba(0,0,0, 0.5);\r\n        &:hover {\r\n            box-shadow: 0px 0px 0px  rgba(0,0,0, 0.5);\r\n        }\r\n    }\r\n    & .track_infos {\r\n        margin: 30px 0px;\r\n        & .track_name {\r\n            margin:  10px 0 0 0;\r\n            color: #4285F4;\r\n        }\r\n        & .artist_name {\r\n            margin: 10px 0 0 0;\r\n            color: #34A853;\r\n        }\r\n        & .album_name {\r\n            margin: 10px 0 0 0;\r\n            // color: #FBBC05;\r\n        }\r\n    }\r\n    & .music_player {\r\n        outline: none;\r\n        border: 1px solid lightgrey;\r\n        border-radius: 100px;\r\n        transition: all 0.3s linear;\r\n        min-width: 250px;\r\n        width: 400px;\r\n        box-shadow: 1px 1px 5px rgba(0,0,0, 0.5);\r\n        &:hover {\r\n            box-shadow: 3px 3px 10px rgba(0,0,0, 0.5);\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n\r\nconst Details = ({selectedSong, history}) => {\r\n\r\n    const [bckImg, setBckImg] = useState('');\r\n\r\n    const changeBackground = (value) => {\r\n        setBckImg(value)\r\n    }\r\n\r\n    const BackImg = styled.div`\r\n        position: absolute;\r\n        left:0;\r\n        right:0;\r\n        top:0;\r\n        bottom:0;\r\n        z-index: -1;\r\n        background-image: url(${bckImg});\r\n        filter: blur(8px);\r\n        -webkit-filter: blur(10px);\r\n        background-position: center;\r\n        background-repeat: no-repeat;\r\n        background-size: cover;\r\n    `;\r\n\r\n    const parseMillisecondsIntoReadableTime = (millisec) => {\r\n        var seconds = (millisec / 1000).toFixed(0);\r\n        var minutes = Math.floor(seconds / 60);\r\n        var hours = \"\";\r\n        if (minutes > 59) {\r\n            hours = Math.floor(minutes / 60);\r\n            hours = (hours >= 10) ? hours : \"0\" + hours;\r\n            minutes = minutes - (hours * 60);\r\n            minutes = (minutes >= 10) ? minutes : \"0\" + minutes;\r\n        }\r\n\r\n        seconds = Math.floor(seconds % 60);\r\n        seconds = (seconds >= 10) ? seconds : \"0\" + seconds;\r\n        if (hours !== \"\") {\r\n            return hours + \":\" + minutes + \":\" + seconds;\r\n        }\r\n        return minutes + \":\" + seconds;\r\n    }\r\n\r\n    const data = [\r\n        {\r\n          title: 'Artist Name',\r\n          value: selectedSong.artistName || '-'\r\n        },\r\n        {\r\n          title: 'Track Name',\r\n          value: selectedSong.trackName || '-'\r\n        },\r\n        {\r\n          title: 'Album Name',\r\n          value: selectedSong.collectionName || '-'\r\n        },\r\n        {\r\n          title: 'Genre',\r\n          value: selectedSong.primaryGenreName || '-'\r\n        },\r\n        {\r\n          title: 'Track Length',\r\n          value: parseMillisecondsIntoReadableTime(selectedSong.trackTimeMillis)\r\n        },\r\n        {\r\n          title: 'Release Date',\r\n          value: moment(selectedSong.releaseDate).format('DD-MM-YYYY')\r\n        },\r\n        {\r\n          title: 'Country',\r\n          value: selectedSong.country || '-'\r\n        },\r\n        {\r\n          title: 'iTunes Price',\r\n          value: selectedSong.trackPrice || 'NA'\r\n        },\r\n    ];\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        // pushes back to homepage if no track is selected\r\n        if (Object.keys(selectedSong).length === 0) {\r\n            history.push('/');\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div style={{ height: '100vh', background: 'transparent' }}>\r\n            <Breadcrumb style={{ padding: 24, background: '#eee', fontSize: 18, zIndex: 999999 }}>\r\n                <Breadcrumb.Item>\r\n                    <Link to=\"/\">Home</Link>\r\n                </Breadcrumb.Item>\r\n                <Breadcrumb.Item>Details</Breadcrumb.Item>\r\n            </Breadcrumb>\r\n            <Row>\r\n                <BackImg></BackImg> \r\n                <Col sm={8} xs={24} style={{ padding: 25 }}>\r\n                    <Card style={{ borderRadius: 20 }}>\r\n                        <CustomDiv>\r\n                            <img className=\"image\" src={selectedSong.artworkUrl100 || ''} alt=\"album art\" />\r\n                        </CustomDiv>\r\n                        <CustomDiv>\r\n                            <div className=\"track_infos\">\r\n                                <Typography.Title level={3} className=\"track_name\">{selectedSong.trackName}</Typography.Title>\r\n                                <Typography.Title level={4} className=\"artist_name\">{selectedSong.artistName}</Typography.Title>\r\n                                <p className=\"album_name\">{selectedSong.collectionName}</p>\r\n                            </div>\r\n                        </CustomDiv>\r\n                        <CustomDiv>\r\n                            <ReactAudioPlayer\r\n                                src={selectedSong.previewUrl}\r\n                                controls\r\n                                className=\"music_player\"\r\n                                onPlay={() => changeBackground(selectedSong.artworkUrl100)}\r\n                                onPause={() => changeBackground()}\r\n                            />\r\n                        </CustomDiv>\r\n                    </Card> \r\n                </Col>\r\n                <Col sm={16} xs={24} style={{ padding: 20 }}>\r\n                    <Card style={{ borderRadius: 20 }}>\r\n                        <List\r\n                            itemLayout=\"horizontal\"\r\n                            dataSource={Object.keys(selectedSong).length === 0 ? [] : data}\r\n                            loading={Object.keys(selectedSong).length === 0}\r\n                            renderItem={item => (\r\n                                <List.Item>\r\n                                    <List.Item.Meta\r\n                                        title={<b>{item.title}</b>}\r\n                                    />\r\n                                    <List.Item.Meta\r\n                                        title={<p><span style={{ display: item.title === 'iTunes Price' ? 'inline-block' : 'none' }}>&#36;</span>{item.value}</p>}\r\n                                    />\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selectedSong: state.selectedSong.song\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Details);\r\n","import { createReducer } from 'reduxsauce'\r\nimport SearchActions from '../Actions/Search';\r\n\r\n// the initial state of this reducer\r\nexport const INITIAL_STATE = { data : [] }\r\n\r\n// the eagle has landed\r\nexport const setSearchData = (state = INITIAL_STATE, action) => {\r\n  return { ...state, data : action.payload }\r\n}\r\n\r\n// map our action types to our reducer functions\r\nexport const HANDLERS = {\r\n  [SearchActions.Types.SET_SEARCH_DATA]: setSearchData,\r\n}\r\n\r\nconst SearchReducer = createReducer(INITIAL_STATE, HANDLERS);\r\n\r\nexport default SearchReducer;","import { createReducer } from 'reduxsauce'\r\nimport SelectedSongActions from '../Actions/selectedSong';\r\n\r\n// the initial state of this reducer\r\nexport const INITIAL_STATE = { song : {} }\r\n\r\nexport const setSelectedSong = (state = INITIAL_STATE, action) => {\r\n  return { ...state, song : action.payload }\r\n}\r\n\r\n// map our action types to our reducer functions\r\nexport const HANDLERS = {\r\n  [SelectedSongActions.Types.SET_SELECTED_SONG]: setSelectedSong,\r\n}\r\n\r\nconst selectedSongReducer = createReducer(INITIAL_STATE, HANDLERS);\r\n\r\n\r\nexport default selectedSongReducer;","import { combineReducers } from \"redux\";\r\nimport SearchReducer from \"./SearchReducer\";\r\nimport selectedSongReducer from \"./selectedSongReducer\";\r\n\r\nconst rootReducers = combineReducers({\r\n    searchData:  SearchReducer,\r\n    selectedSong: selectedSongReducer,\r\n})\r\n\r\nexport default rootReducers;","import { create } from 'apisauce'\r\n\r\n// define the api\r\nconst api = create({\r\n  baseURL: 'https://itunes.apple.com',\r\n});\r\n\r\n\r\nexport default api;\r\n","import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport Api from '../Api/api'\r\n\r\nimport SearchActions from '../Actions/Search';\r\nimport SelectedSongActions from '../Actions/selectedSong';\r\n\r\nfunction* fetchSearchData(action) {\r\n    try {\r\n        const payload = yield call(getData, action.value);\r\n        yield put(SearchActions.Creators.setSearchData(payload));\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nfunction* setSelectedData(action) {\r\n    try {\r\n        yield put(SelectedSongActions.Creators.setSelectedSong(action.payload));\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nasync function getData(arg) {\r\n    const response = await Api.get(`/search?term=${arg}`);\r\n    return await response.data;\r\n}\r\n\r\nexport default function* mySaga() {\r\n  yield takeLatest(SearchActions.Types.FETCH_SEARCH_DATA, fetchSearchData);\r\n  yield takeLatest(SelectedSongActions.Types.GET_SELECTED_SONG, setSelectedData);\r\n}","/**\r\n * Create the store with dynamic reducers\r\n */\r\n\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducers from './Reducers';\r\nimport mySaga from \"./Saga/saga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n  rootReducers,\r\n  compose(applyMiddleware(sagaMiddleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n);\r\n  \r\nsagaMiddleware.run(mySaga);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n// import './App.css';\nimport Main from './containers/App';\nimport Details from './containers/SongDetails';\nimport 'antd/dist/antd.css'; \nimport Store from './configureStore';\nimport { Provider } from 'react-redux'\n\nfunction App() {\n  return (\n    <Provider store={Store}>\n      <Router>\n        <Switch>\n          <Route path=\"/details\" component={Details} />\n          <Route path=\"/\" component={Main} />\n        </Switch>\n      </Router> \n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}